{"remainingRequest":"/Users/jeroen/Documents/_work/innouveau/projects/innouveau/corona/dev/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jeroen/Documents/_work/innouveau/projects/innouveau/corona/dev/src/components/graph/line-chart.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/jeroen/Documents/_work/innouveau/projects/innouveau/corona/dev/src/components/graph/line-chart.vue","mtime":1585506188161},{"path":"/Users/jeroen/Documents/_work/innouveau/projects/innouveau/corona/dev/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jeroen/Documents/_work/innouveau/projects/innouveau/corona/dev/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/jeroen/Documents/_work/innouveau/projects/innouveau/corona/dev/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/jeroen/Documents/_work/innouveau/projects/innouveau/corona/dev/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jeroen/Documents/_work/innouveau/projects/innouveau/corona/dev/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jeroen/Documents/_work/innouveau/projects/innouveau/corona/dev/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpAaW1wb3J0ICdAL3N0eWxlcy92YXJpYWJsZXMuc2Nzcyc7CgoubGluZS1jaGFydCB7CgogICAgLmxpbmUgewogICAgICAgIGZpbGw6IG5vbmU7CiAgICAgICAgc3Ryb2tlLXdpZHRoOiAxOwogICAgfQoKICAgIC5vdmVybGF5IHsKICAgICAgICBmaWxsOiBub25lOwogICAgICAgIHBvaW50ZXItZXZlbnRzOiBhbGw7CiAgICB9CgogICAgLmRvdCB7CiAgICAgICAgc3Ryb2tlOiAjZmZmOwogICAgfQoKICAgIC5mb2N1cyBjaXJjbGUgewogICAgICAgIGZpbGw6IG5vbmU7CiAgICAgICAgc3Ryb2tlOiBzdGVlbGJsdWU7CiAgICB9Cn0K"},{"version":3,"sources":["line-chart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkJA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"line-chart.vue","sourceRoot":"src/components/graph","sourcesContent":["<script>\n    import * as d3 from 'd3';\n\n    export default {\n        name: 'line-chart',\n        components: {},\n        props: {\n            data: {\n                type: Array,\n                required: true\n            }\n        },\n        data() {\n            let margin = {top: 50, right: 50, bottom: 50, left: 50};\n            return {\n                settings: {\n                    margin,\n                    width: 800 - margin.left - margin.right,\n                    height: 300 - margin.top - margin.bottom\n                },\n                svg: null,\n                xScale: null,\n                yScale: null\n            }\n        },\n        computed: {\n            mapping() {\n                return this.$store.state.mapping;\n            },\n            countries() {\n                return this.$store.state.countries.all;\n            }\n        },\n        methods: {\n            update() {\n                this.clear();\n                this.draw()\n\n            },\n            clear() {\n                if (this.svg) {\n                    d3.selectAll('svg').remove();\n                }\n            },\n            draw() {\n                let n, max;\n                n = 0;\n                max = 0;\n\n                for (let country of this.data) {\n                    let thisMax = d3.max(country.dataPoints.map(d => d.fatalities));\n                    if (country.dataPoints.length > n) {\n                        n = country.dataPoints.length;\n                    }\n                    if (thisMax > max) {\n                        max = thisMax;\n                    }\n                }\n\n\n                this.xScale = d3.scaleLinear()\n                    .domain([0, n-1])\n                    .range([0, this.settings.width]);\n\n                this.yScale = d3.scaleLinear()\n                    .domain([0, max])\n                    .range([this.settings.height, 0]);\n\n                this.drawAxes();\n\n                for (let country of this.data) {\n                    this.drawCountry(country);\n                }\n            },\n            drawCountry(country) {\n                let line, dataset;\n\n                dataset = country.dataPoints;\n                line = d3.line()\n                    .x((d, i) => { return this.xScale(i); })\n                    .y((d) => { return this.yScale(d.fatalities); })\n                    .curve(d3.curveMonotoneX);\n\n\n                this.svg.append(\"path\")\n                    .datum(dataset)\n                    .attr(\"class\", \"line\")\n                    .attr(\"stroke\", country.color)\n                    .attr(\"d\", line);\n\n                this.svg.selectAll(\".dot\")\n                    .data(dataset)\n                    .enter().append(\"circle\")\n                    .attr(\"class\", \"dot\")\n                    .attr(\"fill\", country.color)\n                    .attr(\"cx\", (d, i) => { return this.xScale(i) })\n                    .attr(\"cy\", (d) => { return this.yScale(d.fatalities) })\n                    .attr(\"r\", 2)\n                    .on(\"mouseover\", (a, b, c) => {\n\n                    })\n            },\n            drawAxes() {\n                this.svg = d3.select(\".line-chart\").append(\"svg\")\n                    .attr(\"width\", this.settings.width + this.settings.margin.left + this.settings.margin.right)\n                    .attr(\"height\", this.settings.height + this.settings.margin.top + this.settings.margin.bottom)\n                    .append(\"g\")\n                    .attr(\"transform\", \"translate(\" + this.settings.margin.left + \",\" + this.settings.margin.top + \")\");\n\n                this.svg.append(\"g\")\n                    .attr(\"class\", \"x axis\")\n                    .attr(\"transform\", \"translate(0,\" + this.settings.height + \")\")\n                    .call(d3.axisBottom(this.xScale));\n\n                this.svg.append(\"g\")\n                    .attr(\"class\", \"y axis\")\n                    .call(d3.axisLeft(this.yScale));\n            }\n        },\n        mounted() {\n            this.update();\n        },\n        watch: {\n            mapping:  {\n                handler: function(newValue) {\n                    this.update();\n                },\n                deep: true\n            },\n            countries:  {\n                handler: function(newValue) {\n                    this.update();\n                },\n                deep: true\n            }\n        }\n    }\n</script>\n\n\n<template>\n    <div class=\"line-chart\"></div>\n</template>\n\n\n<style lang=\"scss\">\n    @import '@/styles/variables.scss';\n\n    .line-chart {\n\n        .line {\n            fill: none;\n            stroke-width: 1;\n        }\n\n        .overlay {\n            fill: none;\n            pointer-events: all;\n        }\n\n        .dot {\n            stroke: #fff;\n        }\n\n        .focus circle {\n            fill: none;\n            stroke: steelblue;\n        }\n    }\n</style>"]}]}