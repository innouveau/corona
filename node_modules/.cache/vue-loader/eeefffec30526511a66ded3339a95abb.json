{"remainingRequest":"/Users/jeroen/Documents/_work/innouveau/projects/innouveau/corona/dev/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jeroen/Documents/_work/innouveau/projects/innouveau/corona/dev/src/components/graph/line-chart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jeroen/Documents/_work/innouveau/projects/innouveau/corona/dev/src/components/graph/line-chart.vue","mtime":1585506188161},{"path":"/Users/jeroen/Documents/_work/innouveau/projects/innouveau/corona/dev/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jeroen/Documents/_work/innouveau/projects/innouveau/corona/dev/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJzsKCmV4cG9ydCBkZWZhdWx0IHsKICAgIG5hbWU6ICdsaW5lLWNoYXJ0JywKICAgIGNvbXBvbmVudHM6IHt9LAogICAgcHJvcHM6IHsKICAgICAgICBkYXRhOiB7CiAgICAgICAgICAgIHR5cGU6IEFycmF5LAogICAgICAgICAgICByZXF1aXJlZDogdHJ1ZQogICAgICAgIH0KICAgIH0sCiAgICBkYXRhKCkgewogICAgICAgIGxldCBtYXJnaW4gPSB7dG9wOiA1MCwgcmlnaHQ6IDUwLCBib3R0b206IDUwLCBsZWZ0OiA1MH07CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgc2V0dGluZ3M6IHsKICAgICAgICAgICAgICAgIG1hcmdpbiwKICAgICAgICAgICAgICAgIHdpZHRoOiA4MDAgLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodCwKICAgICAgICAgICAgICAgIGhlaWdodDogMzAwIC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b20KICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3ZnOiBudWxsLAogICAgICAgICAgICB4U2NhbGU6IG51bGwsCiAgICAgICAgICAgIHlTY2FsZTogbnVsbAogICAgICAgIH0KICAgIH0sCiAgICBjb21wdXRlZDogewogICAgICAgIG1hcHBpbmcoKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5tYXBwaW5nOwogICAgICAgIH0sCiAgICAgICAgY291bnRyaWVzKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuY291bnRyaWVzLmFsbDsKICAgICAgICB9CiAgICB9LAogICAgbWV0aG9kczogewogICAgICAgIHVwZGF0ZSgpIHsKICAgICAgICAgICAgdGhpcy5jbGVhcigpOwogICAgICAgICAgICB0aGlzLmRyYXcoKQoKICAgICAgICB9LAogICAgICAgIGNsZWFyKCkgewogICAgICAgICAgICBpZiAodGhpcy5zdmcpIHsKICAgICAgICAgICAgICAgIGQzLnNlbGVjdEFsbCgnc3ZnJykucmVtb3ZlKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGRyYXcoKSB7CiAgICAgICAgICAgIGxldCBuLCBtYXg7CiAgICAgICAgICAgIG4gPSAwOwogICAgICAgICAgICBtYXggPSAwOwoKICAgICAgICAgICAgZm9yIChsZXQgY291bnRyeSBvZiB0aGlzLmRhdGEpIHsKICAgICAgICAgICAgICAgIGxldCB0aGlzTWF4ID0gZDMubWF4KGNvdW50cnkuZGF0YVBvaW50cy5tYXAoZCA9PiBkLmZhdGFsaXRpZXMpKTsKICAgICAgICAgICAgICAgIGlmIChjb3VudHJ5LmRhdGFQb2ludHMubGVuZ3RoID4gbikgewogICAgICAgICAgICAgICAgICAgIG4gPSBjb3VudHJ5LmRhdGFQb2ludHMubGVuZ3RoOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHRoaXNNYXggPiBtYXgpIHsKICAgICAgICAgICAgICAgICAgICBtYXggPSB0aGlzTWF4OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgoKICAgICAgICAgICAgdGhpcy54U2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpCiAgICAgICAgICAgICAgICAuZG9tYWluKFswLCBuLTFdKQogICAgICAgICAgICAgICAgLnJhbmdlKFswLCB0aGlzLnNldHRpbmdzLndpZHRoXSk7CgogICAgICAgICAgICB0aGlzLnlTY2FsZSA9IGQzLnNjYWxlTGluZWFyKCkKICAgICAgICAgICAgICAgIC5kb21haW4oWzAsIG1heF0pCiAgICAgICAgICAgICAgICAucmFuZ2UoW3RoaXMuc2V0dGluZ3MuaGVpZ2h0LCAwXSk7CgogICAgICAgICAgICB0aGlzLmRyYXdBeGVzKCk7CgogICAgICAgICAgICBmb3IgKGxldCBjb3VudHJ5IG9mIHRoaXMuZGF0YSkgewogICAgICAgICAgICAgICAgdGhpcy5kcmF3Q291bnRyeShjb3VudHJ5KTsKICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgZHJhd0NvdW50cnkoY291bnRyeSkgewogICAgICAgICAgICBsZXQgbGluZSwgZGF0YXNldDsKCiAgICAgICAgICAgIGRhdGFzZXQgPSBjb3VudHJ5LmRhdGFQb2ludHM7CiAgICAgICAgICAgIGxpbmUgPSBkMy5saW5lKCkKICAgICAgICAgICAgICAgIC54KChkLCBpKSA9PiB7IHJldHVybiB0aGlzLnhTY2FsZShpKTsgfSkKICAgICAgICAgICAgICAgIC55KChkKSA9PiB7IHJldHVybiB0aGlzLnlTY2FsZShkLmZhdGFsaXRpZXMpOyB9KQogICAgICAgICAgICAgICAgLmN1cnZlKGQzLmN1cnZlTW9ub3RvbmVYKTsKCgogICAgICAgICAgICB0aGlzLnN2Zy5hcHBlbmQoInBhdGgiKQogICAgICAgICAgICAgICAgLmRhdHVtKGRhdGFzZXQpCiAgICAgICAgICAgICAgICAuYXR0cigiY2xhc3MiLCAibGluZSIpCiAgICAgICAgICAgICAgICAuYXR0cigic3Ryb2tlIiwgY291bnRyeS5jb2xvcikKICAgICAgICAgICAgICAgIC5hdHRyKCJkIiwgbGluZSk7CgogICAgICAgICAgICB0aGlzLnN2Zy5zZWxlY3RBbGwoIi5kb3QiKQogICAgICAgICAgICAgICAgLmRhdGEoZGF0YXNldCkKICAgICAgICAgICAgICAgIC5lbnRlcigpLmFwcGVuZCgiY2lyY2xlIikKICAgICAgICAgICAgICAgIC5hdHRyKCJjbGFzcyIsICJkb3QiKQogICAgICAgICAgICAgICAgLmF0dHIoImZpbGwiLCBjb3VudHJ5LmNvbG9yKQogICAgICAgICAgICAgICAgLmF0dHIoImN4IiwgKGQsIGkpID0+IHsgcmV0dXJuIHRoaXMueFNjYWxlKGkpIH0pCiAgICAgICAgICAgICAgICAuYXR0cigiY3kiLCAoZCkgPT4geyByZXR1cm4gdGhpcy55U2NhbGUoZC5mYXRhbGl0aWVzKSB9KQogICAgICAgICAgICAgICAgLmF0dHIoInIiLCAyKQogICAgICAgICAgICAgICAgLm9uKCJtb3VzZW92ZXIiLCAoYSwgYiwgYykgPT4gewoKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgfSwKICAgICAgICBkcmF3QXhlcygpIHsKICAgICAgICAgICAgdGhpcy5zdmcgPSBkMy5zZWxlY3QoIi5saW5lLWNoYXJ0IikuYXBwZW5kKCJzdmciKQogICAgICAgICAgICAgICAgLmF0dHIoIndpZHRoIiwgdGhpcy5zZXR0aW5ncy53aWR0aCArIHRoaXMuc2V0dGluZ3MubWFyZ2luLmxlZnQgKyB0aGlzLnNldHRpbmdzLm1hcmdpbi5yaWdodCkKICAgICAgICAgICAgICAgIC5hdHRyKCJoZWlnaHQiLCB0aGlzLnNldHRpbmdzLmhlaWdodCArIHRoaXMuc2V0dGluZ3MubWFyZ2luLnRvcCArIHRoaXMuc2V0dGluZ3MubWFyZ2luLmJvdHRvbSkKICAgICAgICAgICAgICAgIC5hcHBlbmQoImciKQogICAgICAgICAgICAgICAgLmF0dHIoInRyYW5zZm9ybSIsICJ0cmFuc2xhdGUoIiArIHRoaXMuc2V0dGluZ3MubWFyZ2luLmxlZnQgKyAiLCIgKyB0aGlzLnNldHRpbmdzLm1hcmdpbi50b3AgKyAiKSIpOwoKICAgICAgICAgICAgdGhpcy5zdmcuYXBwZW5kKCJnIikKICAgICAgICAgICAgICAgIC5hdHRyKCJjbGFzcyIsICJ4IGF4aXMiKQogICAgICAgICAgICAgICAgLmF0dHIoInRyYW5zZm9ybSIsICJ0cmFuc2xhdGUoMCwiICsgdGhpcy5zZXR0aW5ncy5oZWlnaHQgKyAiKSIpCiAgICAgICAgICAgICAgICAuY2FsbChkMy5heGlzQm90dG9tKHRoaXMueFNjYWxlKSk7CgogICAgICAgICAgICB0aGlzLnN2Zy5hcHBlbmQoImciKQogICAgICAgICAgICAgICAgLmF0dHIoImNsYXNzIiwgInkgYXhpcyIpCiAgICAgICAgICAgICAgICAuY2FsbChkMy5heGlzTGVmdCh0aGlzLnlTY2FsZSkpOwogICAgICAgIH0KICAgIH0sCiAgICBtb3VudGVkKCkgewogICAgICAgIHRoaXMudXBkYXRlKCk7CiAgICB9LAogICAgd2F0Y2g6IHsKICAgICAgICBtYXBwaW5nOiAgewogICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihuZXdWYWx1ZSkgewogICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZGVlcDogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgY291bnRyaWVzOiAgewogICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihuZXdWYWx1ZSkgewogICAgICAgICAgICAgICAgdGhpcy51cGRhdGUoKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZGVlcDogdHJ1ZQogICAgICAgIH0KICAgIH0KfQo="},{"version":3,"sources":["line-chart.vue"],"names":[],"mappings":";AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"line-chart.vue","sourceRoot":"src/components/graph","sourcesContent":["<script>\n    import * as d3 from 'd3';\n\n    export default {\n        name: 'line-chart',\n        components: {},\n        props: {\n            data: {\n                type: Array,\n                required: true\n            }\n        },\n        data() {\n            let margin = {top: 50, right: 50, bottom: 50, left: 50};\n            return {\n                settings: {\n                    margin,\n                    width: 800 - margin.left - margin.right,\n                    height: 300 - margin.top - margin.bottom\n                },\n                svg: null,\n                xScale: null,\n                yScale: null\n            }\n        },\n        computed: {\n            mapping() {\n                return this.$store.state.mapping;\n            },\n            countries() {\n                return this.$store.state.countries.all;\n            }\n        },\n        methods: {\n            update() {\n                this.clear();\n                this.draw()\n\n            },\n            clear() {\n                if (this.svg) {\n                    d3.selectAll('svg').remove();\n                }\n            },\n            draw() {\n                let n, max;\n                n = 0;\n                max = 0;\n\n                for (let country of this.data) {\n                    let thisMax = d3.max(country.dataPoints.map(d => d.fatalities));\n                    if (country.dataPoints.length > n) {\n                        n = country.dataPoints.length;\n                    }\n                    if (thisMax > max) {\n                        max = thisMax;\n                    }\n                }\n\n\n                this.xScale = d3.scaleLinear()\n                    .domain([0, n-1])\n                    .range([0, this.settings.width]);\n\n                this.yScale = d3.scaleLinear()\n                    .domain([0, max])\n                    .range([this.settings.height, 0]);\n\n                this.drawAxes();\n\n                for (let country of this.data) {\n                    this.drawCountry(country);\n                }\n            },\n            drawCountry(country) {\n                let line, dataset;\n\n                dataset = country.dataPoints;\n                line = d3.line()\n                    .x((d, i) => { return this.xScale(i); })\n                    .y((d) => { return this.yScale(d.fatalities); })\n                    .curve(d3.curveMonotoneX);\n\n\n                this.svg.append(\"path\")\n                    .datum(dataset)\n                    .attr(\"class\", \"line\")\n                    .attr(\"stroke\", country.color)\n                    .attr(\"d\", line);\n\n                this.svg.selectAll(\".dot\")\n                    .data(dataset)\n                    .enter().append(\"circle\")\n                    .attr(\"class\", \"dot\")\n                    .attr(\"fill\", country.color)\n                    .attr(\"cx\", (d, i) => { return this.xScale(i) })\n                    .attr(\"cy\", (d) => { return this.yScale(d.fatalities) })\n                    .attr(\"r\", 2)\n                    .on(\"mouseover\", (a, b, c) => {\n\n                    })\n            },\n            drawAxes() {\n                this.svg = d3.select(\".line-chart\").append(\"svg\")\n                    .attr(\"width\", this.settings.width + this.settings.margin.left + this.settings.margin.right)\n                    .attr(\"height\", this.settings.height + this.settings.margin.top + this.settings.margin.bottom)\n                    .append(\"g\")\n                    .attr(\"transform\", \"translate(\" + this.settings.margin.left + \",\" + this.settings.margin.top + \")\");\n\n                this.svg.append(\"g\")\n                    .attr(\"class\", \"x axis\")\n                    .attr(\"transform\", \"translate(0,\" + this.settings.height + \")\")\n                    .call(d3.axisBottom(this.xScale));\n\n                this.svg.append(\"g\")\n                    .attr(\"class\", \"y axis\")\n                    .call(d3.axisLeft(this.yScale));\n            }\n        },\n        mounted() {\n            this.update();\n        },\n        watch: {\n            mapping:  {\n                handler: function(newValue) {\n                    this.update();\n                },\n                deep: true\n            },\n            countries:  {\n                handler: function(newValue) {\n                    this.update();\n                },\n                deep: true\n            }\n        }\n    }\n</script>\n\n\n<template>\n    <div class=\"line-chart\"></div>\n</template>\n\n\n<style lang=\"scss\">\n    @import '@/styles/variables.scss';\n\n    .line-chart {\n\n        .line {\n            fill: none;\n            stroke-width: 1;\n        }\n\n        .overlay {\n            fill: none;\n            pointer-events: all;\n        }\n\n        .dot {\n            stroke: #fff;\n        }\n\n        .focus circle {\n            fill: none;\n            stroke: steelblue;\n        }\n    }\n</style>"]}]}