{"remainingRequest":"/Users/jeroen/Documents/_work/innouveau/projects/innouveau/corona/dev/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jeroen/Documents/_work/innouveau/projects/innouveau/corona/dev/src/components/graph/line-chart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jeroen/Documents/_work/innouveau/projects/innouveau/corona/dev/src/components/graph/line-chart.vue","mtime":1585508835880},{"path":"/Users/jeroen/Documents/_work/innouveau/projects/innouveau/corona/dev/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jeroen/Documents/_work/innouveau/projects/innouveau/corona/dev/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJzsKCmV4cG9ydCBkZWZhdWx0IHsKICAgIG5hbWU6ICdsaW5lLWNoYXJ0JywKICAgIGNvbXBvbmVudHM6IHt9LAogICAgcHJvcHM6IHsKICAgICAgICBkYXRhOiB7CiAgICAgICAgICAgIHR5cGU6IEFycmF5LAogICAgICAgICAgICByZXF1aXJlZDogdHJ1ZQogICAgICAgIH0KICAgIH0sCiAgICBkYXRhKCkgewogICAgICAgIGxldCBtYXJnaW4gPSB7dG9wOiA1MCwgcmlnaHQ6IDUwLCBib3R0b206IDUwLCBsZWZ0OiA1MH07CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgc2V0dGluZ3M6IHsKICAgICAgICAgICAgICAgIG1hcmdpbiwKICAgICAgICAgICAgICAgIHdpZHRoOiA4MDAgLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodCwKICAgICAgICAgICAgICAgIGhlaWdodDogMzAwIC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b20KICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3ZnOiBudWxsLAogICAgICAgICAgICB4U2NhbGU6IG51bGwsCiAgICAgICAgICAgIHlTY2FsZTogbnVsbAogICAgICAgIH0KICAgIH0sCiAgICBjb21wdXRlZDogewogICAgICAgIG1hcHBpbmcoKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5zZXR0aW5nczsKICAgICAgICB9LAogICAgICAgIGNvdW50cmllcygpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLmNvdW50cmllcy5hbGw7CiAgICAgICAgfSwKICAgICAgICBsb2dTY2FsZSgpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLnNldHRpbmdzLmxvZ1NjYWxlOwogICAgICAgIH0sCiAgICAgICAgcGVyQ2FwaXRhKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuc2V0dGluZ3MucGVyQ2FwaXRhOwogICAgICAgIH0KICAgIH0sCiAgICBtZXRob2RzOiB7CiAgICAgICAgdXBkYXRlKCkgewogICAgICAgICAgICB0aGlzLmNsZWFyKCk7CiAgICAgICAgICAgIHRoaXMuZHJhdygpCgogICAgICAgIH0sCiAgICAgICAgY2xlYXIoKSB7CiAgICAgICAgICAgIGlmICh0aGlzLnN2ZykgewogICAgICAgICAgICAgICAgZDMuc2VsZWN0QWxsKCdzdmcnKS5yZW1vdmUoKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgZ2V0VmFsdWUoY291bnRyeSwgdmFsdWUpIHsKICAgICAgICAgICAgaWYgKHRoaXMucGVyQ2FwaXRhKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gKDEwMDAwMDAgKiB2YWx1ZSkgLyBjb3VudHJ5LnBvcHVsYXRpb247CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGRyYXcoKSB7CiAgICAgICAgICAgIGxldCBuLCBtYXg7CiAgICAgICAgICAgIG4gPSAwOwogICAgICAgICAgICBtYXggPSAwOwoKICAgICAgICAgICAgZm9yIChsZXQgY291bnRyeSBvZiB0aGlzLmRhdGEpIHsKICAgICAgICAgICAgICAgIGxldCB0aGlzTWF4ID0gZDMubWF4KGNvdW50cnkuZGF0YVBvaW50cy5tYXAoZCA9PiB0aGlzLmdldFZhbHVlKGNvdW50cnksIGQuZmF0YWxpdGllcykpKTsKICAgICAgICAgICAgICAgIGlmIChjb3VudHJ5LmRhdGFQb2ludHMubGVuZ3RoID4gbikgewogICAgICAgICAgICAgICAgICAgIG4gPSBjb3VudHJ5LmRhdGFQb2ludHMubGVuZ3RoOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHRoaXNNYXggPiBtYXgpIHsKICAgICAgICAgICAgICAgICAgICBtYXggPSB0aGlzTWF4OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgoKICAgICAgICAgICAgdGhpcy54U2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpCiAgICAgICAgICAgICAgICAuZG9tYWluKFswLCBuLTFdKQogICAgICAgICAgICAgICAgLnJhbmdlKFswLCB0aGlzLnNldHRpbmdzLndpZHRoXSk7CgoKICAgICAgICAgICAgaWYgKHRoaXMubG9nU2NhbGUpIHsKICAgICAgICAgICAgICAgIHRoaXMueVNjYWxlID0gZDMuc2NhbGVMb2coKQogICAgICAgICAgICAgICAgICAgIC5kb21haW4oWzEsIG1heF0pCiAgICAgICAgICAgICAgICAgICAgLnJhbmdlKFt0aGlzLnNldHRpbmdzLmhlaWdodCwgMF0pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhpcy55U2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpCiAgICAgICAgICAgICAgICAgICAgLmRvbWFpbihbMCwgbWF4XSkKICAgICAgICAgICAgICAgICAgICAucmFuZ2UoW3RoaXMuc2V0dGluZ3MuaGVpZ2h0LCAwXSk7CiAgICAgICAgICAgIH0KCgoKICAgICAgICAgICAgdGhpcy5kcmF3QXhlcygpOwoKICAgICAgICAgICAgZm9yIChsZXQgY291bnRyeSBvZiB0aGlzLmRhdGEpIHsKICAgICAgICAgICAgICAgIHRoaXMuZHJhd0NvdW50cnkoY291bnRyeSk7CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGRyYXdDb3VudHJ5KGNvdW50cnkpIHsKICAgICAgICAgICAgbGV0IGxpbmUsIGRhdGFzZXQ7CgogICAgICAgICAgICBkYXRhc2V0ID0gY291bnRyeS5kYXRhUG9pbnRzOwogICAgICAgICAgICBsaW5lID0gZDMubGluZSgpCiAgICAgICAgICAgICAgICAueCgoZCwgaSkgPT4geyByZXR1cm4gdGhpcy54U2NhbGUoaSk7IH0pCiAgICAgICAgICAgICAgICAueSgoZCkgPT4geyByZXR1cm4gdGhpcy55U2NhbGUodGhpcy5nZXRWYWx1ZShjb3VudHJ5LCBkLmZhdGFsaXRpZXMpKTsgfSkKICAgICAgICAgICAgICAgIC5jdXJ2ZShkMy5jdXJ2ZU1vbm90b25lWCk7CgoKICAgICAgICAgICAgdGhpcy5zdmcuYXBwZW5kKCJwYXRoIikKICAgICAgICAgICAgICAgIC5kYXR1bShkYXRhc2V0KQogICAgICAgICAgICAgICAgLmF0dHIoImNsYXNzIiwgImxpbmUiKQogICAgICAgICAgICAgICAgLmF0dHIoInN0cm9rZSIsIGNvdW50cnkuY29sb3IpCiAgICAgICAgICAgICAgICAuYXR0cigiZCIsIGxpbmUpOwoKICAgICAgICAgICAgdGhpcy5zdmcuc2VsZWN0QWxsKCIuZG90LmRvdC0tIiArIGNvdW50cnkuaWQpCiAgICAgICAgICAgICAgICAuZGF0YShkYXRhc2V0KQogICAgICAgICAgICAgICAgLmVudGVyKCkuYXBwZW5kKCJjaXJjbGUiKQogICAgICAgICAgICAgICAgLmF0dHIoImNsYXNzIiwgImRvdCBkb3QiICsgY291bnRyeS5pZCkKICAgICAgICAgICAgICAgIC5hdHRyKCJmaWxsIiwgY291bnRyeS5jb2xvcikKICAgICAgICAgICAgICAgIC5hdHRyKCJjeCIsIChkLCBpKSA9PiB7IHJldHVybiB0aGlzLnhTY2FsZShpKSB9KQogICAgICAgICAgICAgICAgLmF0dHIoImN5IiwgKGQpID0+IHsgcmV0dXJuIHRoaXMueVNjYWxlKHRoaXMuZ2V0VmFsdWUoY291bnRyeSwgZC5mYXRhbGl0aWVzKSkgfSkKICAgICAgICAgICAgICAgIC5hdHRyKCJyIiwgMikKICAgICAgICAgICAgICAgIC5vbigibW91c2VvdmVyIiwgKGEsIGIsIGMpID0+IHsKCiAgICAgICAgICAgICAgICB9KQogICAgICAgIH0sCiAgICAgICAgZHJhd0F4ZXMoKSB7CiAgICAgICAgICAgIHRoaXMuc3ZnID0gZDMuc2VsZWN0KCIubGluZS1jaGFydCIpLmFwcGVuZCgic3ZnIikKICAgICAgICAgICAgICAgIC5hdHRyKCJ3aWR0aCIsIHRoaXMuc2V0dGluZ3Mud2lkdGggKyB0aGlzLnNldHRpbmdzLm1hcmdpbi5sZWZ0ICsgdGhpcy5zZXR0aW5ncy5tYXJnaW4ucmlnaHQpCiAgICAgICAgICAgICAgICAuYXR0cigiaGVpZ2h0IiwgdGhpcy5zZXR0aW5ncy5oZWlnaHQgKyB0aGlzLnNldHRpbmdzLm1hcmdpbi50b3AgKyB0aGlzLnNldHRpbmdzLm1hcmdpbi5ib3R0b20pCiAgICAgICAgICAgICAgICAuYXBwZW5kKCJnIikKICAgICAgICAgICAgICAgIC5hdHRyKCJ0cmFuc2Zvcm0iLCAidHJhbnNsYXRlKCIgKyB0aGlzLnNldHRpbmdzLm1hcmdpbi5sZWZ0ICsgIiwiICsgdGhpcy5zZXR0aW5ncy5tYXJnaW4udG9wICsgIikiKTsKCiAgICAgICAgICAgIHRoaXMuc3ZnLmFwcGVuZCgiZyIpCiAgICAgICAgICAgICAgICAuYXR0cigiY2xhc3MiLCAieCBheGlzIikKICAgICAgICAgICAgICAgIC5hdHRyKCJ0cmFuc2Zvcm0iLCAidHJhbnNsYXRlKDAsIiArIHRoaXMuc2V0dGluZ3MuaGVpZ2h0ICsgIikiKQogICAgICAgICAgICAgICAgLmNhbGwoZDMuYXhpc0JvdHRvbSh0aGlzLnhTY2FsZSkpOwoKICAgICAgICAgICAgdGhpcy5zdmcuYXBwZW5kKCJnIikKICAgICAgICAgICAgICAgIC5hdHRyKCJjbGFzcyIsICJ5IGF4aXMiKQogICAgICAgICAgICAgICAgLmNhbGwoZDMuYXhpc0xlZnQodGhpcy55U2NhbGUpKTsKICAgICAgICB9CiAgICB9LAogICAgbW91bnRlZCgpIHsKICAgICAgICB0aGlzLnVwZGF0ZSgpOwogICAgfSwKICAgIHdhdGNoOiB7CiAgICAgICAgbWFwcGluZzogIHsKICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24obmV3VmFsdWUpIHsKICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRlZXA6IHRydWUKICAgICAgICB9LAogICAgICAgIGNvdW50cmllczogIHsKICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24obmV3VmFsdWUpIHsKICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRlZXA6IHRydWUKICAgICAgICB9CiAgICB9Cn0K"},{"version":3,"sources":["line-chart.vue"],"names":[],"mappings":";AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"line-chart.vue","sourceRoot":"src/components/graph","sourcesContent":["<script>\n    import * as d3 from 'd3';\n\n    export default {\n        name: 'line-chart',\n        components: {},\n        props: {\n            data: {\n                type: Array,\n                required: true\n            }\n        },\n        data() {\n            let margin = {top: 50, right: 50, bottom: 50, left: 50};\n            return {\n                settings: {\n                    margin,\n                    width: 800 - margin.left - margin.right,\n                    height: 300 - margin.top - margin.bottom\n                },\n                svg: null,\n                xScale: null,\n                yScale: null\n            }\n        },\n        computed: {\n            mapping() {\n                return this.$store.state.settings;\n            },\n            countries() {\n                return this.$store.state.countries.all;\n            },\n            logScale() {\n                return this.$store.state.settings.logScale;\n            },\n            perCapita() {\n                return this.$store.state.settings.perCapita;\n            }\n        },\n        methods: {\n            update() {\n                this.clear();\n                this.draw()\n\n            },\n            clear() {\n                if (this.svg) {\n                    d3.selectAll('svg').remove();\n                }\n            },\n            getValue(country, value) {\n                if (this.perCapita) {\n                    return (1000000 * value) / country.population;\n                } else {\n                    return value;\n                }\n            },\n            draw() {\n                let n, max;\n                n = 0;\n                max = 0;\n\n                for (let country of this.data) {\n                    let thisMax = d3.max(country.dataPoints.map(d => this.getValue(country, d.fatalities)));\n                    if (country.dataPoints.length > n) {\n                        n = country.dataPoints.length;\n                    }\n                    if (thisMax > max) {\n                        max = thisMax;\n                    }\n                }\n\n\n                this.xScale = d3.scaleLinear()\n                    .domain([0, n-1])\n                    .range([0, this.settings.width]);\n\n\n                if (this.logScale) {\n                    this.yScale = d3.scaleLog()\n                        .domain([1, max])\n                        .range([this.settings.height, 0]);\n                } else {\n                    this.yScale = d3.scaleLinear()\n                        .domain([0, max])\n                        .range([this.settings.height, 0]);\n                }\n\n\n\n                this.drawAxes();\n\n                for (let country of this.data) {\n                    this.drawCountry(country);\n                }\n            },\n            drawCountry(country) {\n                let line, dataset;\n\n                dataset = country.dataPoints;\n                line = d3.line()\n                    .x((d, i) => { return this.xScale(i); })\n                    .y((d) => { return this.yScale(this.getValue(country, d.fatalities)); })\n                    .curve(d3.curveMonotoneX);\n\n\n                this.svg.append(\"path\")\n                    .datum(dataset)\n                    .attr(\"class\", \"line\")\n                    .attr(\"stroke\", country.color)\n                    .attr(\"d\", line);\n\n                this.svg.selectAll(\".dot.dot--\" + country.id)\n                    .data(dataset)\n                    .enter().append(\"circle\")\n                    .attr(\"class\", \"dot dot\" + country.id)\n                    .attr(\"fill\", country.color)\n                    .attr(\"cx\", (d, i) => { return this.xScale(i) })\n                    .attr(\"cy\", (d) => { return this.yScale(this.getValue(country, d.fatalities)) })\n                    .attr(\"r\", 2)\n                    .on(\"mouseover\", (a, b, c) => {\n\n                    })\n            },\n            drawAxes() {\n                this.svg = d3.select(\".line-chart\").append(\"svg\")\n                    .attr(\"width\", this.settings.width + this.settings.margin.left + this.settings.margin.right)\n                    .attr(\"height\", this.settings.height + this.settings.margin.top + this.settings.margin.bottom)\n                    .append(\"g\")\n                    .attr(\"transform\", \"translate(\" + this.settings.margin.left + \",\" + this.settings.margin.top + \")\");\n\n                this.svg.append(\"g\")\n                    .attr(\"class\", \"x axis\")\n                    .attr(\"transform\", \"translate(0,\" + this.settings.height + \")\")\n                    .call(d3.axisBottom(this.xScale));\n\n                this.svg.append(\"g\")\n                    .attr(\"class\", \"y axis\")\n                    .call(d3.axisLeft(this.yScale));\n            }\n        },\n        mounted() {\n            this.update();\n        },\n        watch: {\n            mapping:  {\n                handler: function(newValue) {\n                    this.update();\n                },\n                deep: true\n            },\n            countries:  {\n                handler: function(newValue) {\n                    this.update();\n                },\n                deep: true\n            }\n        }\n    }\n</script>\n\n\n<template>\n    <div class=\"line-chart\"></div>\n</template>\n\n\n<style lang=\"scss\">\n    @import '@/styles/variables.scss';\n\n    .line-chart {\n\n        .line {\n            fill: none;\n            stroke-width: 1;\n        }\n\n        .overlay {\n            fill: none;\n            pointer-events: all;\n        }\n\n        .dot {\n            stroke: #fff;\n        }\n\n        .focus circle {\n            fill: none;\n            stroke: steelblue;\n        }\n    }\n</style>"]}]}